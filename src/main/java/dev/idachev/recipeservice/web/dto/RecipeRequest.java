package dev.idachev.recipeservice.web.dto;

import dev.idachev.recipeservice.model.DifficultyLevel;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.PositiveOrZero;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

/**
 * Data Transfer Object for recipe creation and update requests.
 * Contains all fields needed to create or update a recipe.
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "Recipe creation and update request data")
public class RecipeRequest {
    // Basic recipe information
    @Schema(description = "Recipe title", example = "Spaghetti Carbonara", required = true)
    @NotBlank(message = "Recipe title is required")
    @Size(max = 255, message = "Title must be less than 255 characters")
    private String title;

    @Schema(description = "Recipe description", example = "Classic Italian pasta dish with eggs, cheese, pancetta, and pepper")
    @Size(max = 1000, message = "Description must be less than 1000 characters")
    private String description;

    @Schema(description = "Step-by-step cooking instructions", example = "1. Boil pasta until al dente\n2. In a separate pan, cook pancetta...", required = true)
    @NotBlank(message = "Instructions are required")
    private String instructions;

    @Schema(description = "URL to recipe image", example = "https://example.com/images/carbonara.jpg")
    private String imageUrl;

    // Recipe ingredients
    @Schema(description = "List of ingredients required for the recipe", example = "[\"200g spaghetti\", \"100g pancetta\", \"2 large eggs\"]", required = true)
    @NotEmpty(message = "At least one ingredient is required")
    private List<String> ingredients;

    // Recipe metadata
    @Schema(description = "Total preparation and cooking time in minutes", example = "30")
    @PositiveOrZero(message = "Total time cannot be negative")
    private Integer totalTimeMinutes;

    @Schema(description = "Recipe difficulty level", example = "MEDIUM", enumAsRef = true)
    private DifficultyLevel difficulty;
    
    @Schema(description = "Whether the recipe was generated by AI", example = "false")
    private Boolean isAiGenerated;

    // Nutritional information
    @Schema(description = "Nutritional information for the recipe")
    @Valid
    private MacrosDto macros;
} 